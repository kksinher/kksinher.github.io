<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是服软啊</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-18T12:33:18.195Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>服软</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-Learn(三)</title>
    <link href="http://example.com/2022/11/07/Spring-Learn3/"/>
    <id>http://example.com/2022/11/07/Spring-Learn3/</id>
    <published>2022-11-07T11:15:23.000Z</published>
    <updated>2022-11-18T12:33:18.195Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IOC-操作-Bean-管理-基于注解方式"><a href="#IOC-操作-Bean-管理-基于注解方式" class="headerlink" title="IOC 操作 Bean 管理(基于注解方式)"></a>IOC 操作 Bean 管理(基于注解方式)</h4><h5 id="1、什么是注解"><a href="#1、什么是注解" class="headerlink" title="1、什么是注解"></a>1、什么是注解</h5><p> （1）注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值…)</p><p> （2）使用注解，注解作用在类上面，方法上面，属性上面</p><p> （3）使用注解目的：简化 xml 配置</p><h5 id="2、Spring-针对-Bean-管理中创建对象提供注解"><a href="#2、Spring-针对-Bean-管理中创建对象提供注解" class="headerlink" title="2、Spring 针对 Bean 管理中创建对象提供注解"></a>2、Spring 针对 Bean 管理中创建对象提供注解</h5><p> 下面四个注解功能是一样的，都可以用来创建 bean 实例</p><p> （1）@Component</p><p> （2）@Service</p><p> （3）@Controller</p><p> （4）@Repository</p><h5 id="3、基于注解方式实现对象创建"><a href="#3、基于注解方式实现对象创建" class="headerlink" title="3、基于注解方式实现对象创建"></a>3、基于注解方式实现对象创建</h5><h6 id="第一步-引入依赖-（引入spring-aop-jar包）"><a href="#第一步-引入依赖-（引入spring-aop-jar包）" class="headerlink" title="第一步 引入依赖 （引入spring-aop jar包）"></a>第一步 引入依赖 （引入spring-aop jar包）</h6><h6 id="第二步-开启组件扫描"><a href="#第二步-开启组件扫描" class="headerlink" title="第二步 开启组件扫描"></a>第二步 开启组件扫描</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描 1.如果扫描多个包，多个包使用逗号隔开;2.扫描包上层目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="第三步-创建类，在类上面添加创建对象注解"><a href="#第三步-创建类，在类上面添加创建对象注解" class="headerlink" title="第三步 创建类，在类上面添加创建对象注解"></a>第三步 创建类，在类上面添加创建对象注解</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写（这个类只有一个bean）</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService -- userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> </span><br><span class="line"><span class="comment">//注解等同于XML配置文件:&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span><span class="comment">//控制生成单个或多个对象 &quot;singleton &quot;或&quot;prototype&quot; 默认singleton </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring提供@Component 注解的三个衍生注解：</p><p>@Controller:用于表现层bean的定义</p><p>@Service:用于业务层bean的定义</p><p>@Repository:用于数据层bean的定义</p><h5 id="4、开启组件扫描细节配置"><a href="#4、开启组件扫描细节配置" class="headerlink" title="4、开启组件扫描细节配置"></a>4、开启组件扫描细节配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment"> context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-defaultfilters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--代表只扫描Controller注解的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment"> 下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment"> context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5、完全注解开发"><a href="#5、完全注解开发" class="headerlink" title="5、完全注解开发"></a>5、完全注解开发</h5><h6 id="（1）创建配置类，替代-xml-配置文件"><a href="#（1）创建配置类，替代-xml-配置文件" class="headerlink" title="（1）创建配置类，替代 xml 配置文件"></a>（1）创建配置类，替代 xml 配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.atguigu.dao&quot;,&quot;com.atguigu.service&quot;&#125;)</span><span class="comment">//多个扫描，数组格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（2）编写测试类"><a href="#（2）编写测试类" class="headerlink" title="（2）编写测试类"></a>（2）编写测试类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService2</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//加载配置类  AnnotationConfigApplicationContext 读取配置java类</span></span><br><span class="line"> ApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line"> System.out.println(userService);</span><br><span class="line"> userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、基于注解方式实现属性注入"><a href="#6、基于注解方式实现属性注入" class="headerlink" title="6、基于注解方式实现属性注入"></a>6、基于注解方式实现属性注入</h5><h6 id="（1）-Autowired：根据属性类型进行自动装配"><a href="#（1）-Autowired：根据属性类型进行自动装配" class="headerlink" title="（1）@Autowired：根据属性类型进行自动装配"></a>（1）@Autowired：根据属性类型进行自动装配</h6><p> 第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p><p>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//定义 dao 类型属性</span></span><br><span class="line"> <span class="comment">//不需要添加 set 方法</span></span><br><span class="line"> <span class="comment">//添加注入属性注解</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line"> userDao.add();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（2）-Qualifier：根据名称进行注入，这个-Qualifier-注解的使用，和上面-Autowired-一起使用"><a href="#（2）-Qualifier：根据名称进行注入，这个-Qualifier-注解的使用，和上面-Autowired-一起使用" class="headerlink" title="（2）@Qualifier：根据名称进行注入，这个@Qualifier 注解的使用，和上面@Autowired 一起使用"></a>（2）@Qualifier：根据名称进行注入，这个@Qualifier 注解的使用，和上面@Autowired 一起使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 dao 类型属性</span></span><br><span class="line"><span class="comment">//不需要添加 set 方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="comment">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><h6 id="（3）-Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）"><a href="#（3）-Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）" class="headerlink" title="（3）@Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）"></a>（3）@Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Resource //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><h6 id="（4）-Value：注入普通类型属性"><a href="#（4）-Value：注入普通类型属性" class="headerlink" title="（4）@Value：注入普通类型属性"></a>（4）@Value：注入普通类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;IOC-操作-Bean-管理-基于注解方式&quot;&gt;&lt;a href=&quot;#IOC-操作-Bean-管理-基于注解方式&quot; class=&quot;headerlink&quot; title=&quot;IOC 操作 Bean 管理(基于注解方式)&quot;&gt;&lt;/a&gt;IOC 操作 Bean 管理(基于注解方式)</summary>
      
    
    
    
    <category term="Spring学习笔记" scheme="http://example.com/categories/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Ioc容器" scheme="http://example.com/tags/Ioc%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Learn(一)</title>
    <link href="http://example.com/2022/11/01/Spring-Learn1/"/>
    <id>http://example.com/2022/11/01/Spring-Learn1/</id>
    <published>2022-11-01T11:15:23.000Z</published>
    <updated>2022-11-17T06:50:53.448Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring框架学习-一-——Ioc容器管理"><a href="#Spring框架学习-一-——Ioc容器管理" class="headerlink" title="Spring框架学习(一)——Ioc容器管理"></a>Spring框架学习(一)——Ioc容器管理</h3><h4 id="一、Spring——IOC（Inversion-of-Control）控制反转"><a href="#一、Spring——IOC（Inversion-of-Control）控制反转" class="headerlink" title="一、Spring——IOC（Inversion of Control）控制反转"></a>一、Spring——<a href="https://so.csdn.net/so/search?q=IOC&spm=1001.2101.3001.7020">IOC</a>（Inversion of Control）控制反转</h4><p><strong>思想：</strong>使用对象时，由主动产生对象转换为由<strong>外部</strong>提供对象，此过程中对象创建控制权由程序转移到外部</p><p><strong>Ioc:</strong>    Spring提供了一个容器。称为<strong>Ioc容器</strong>，用来充当Ioc思想中的“<strong>外部</strong>”，Ioc负责对象的创建，初始化对象等一系列工作</p><p><strong>Bean</strong>:   被创建或管理的对象称为Bean</p><p>Bean的本质上就是对象，实例化bean的三种方式：</p><p>1.构造方法实例化Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用静态工厂实例化Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.factory.OrderDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>3.使用实例工厂实例化Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactory</span>&#123;</span><br><span class="line"><span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.factory.UserDaoFactory&quot;</span>/&gt;</span>  配合使用，无实际意义</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userDaoFactory&quot;</span>/&gt;</span>方法名不固定，每次需要配置</span><br></pre></td></tr></table></figure><p>优化如下：</p><p>4.使用FactoryBean实例化Bean(掌握)———-3.变种</p><p>第一步创建类，让这个类作为工厂 bean，实现接口 FactoryBean</p><p>第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt;&#123;</span><br><span class="line">    <span class="comment">//得到bean实例</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(); <span class="comment">//返回你想要的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到bean类型</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType()&#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;  <span class="comment">//对象类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设定单例或非单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//true代表是单例对象，false代表是非单例对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.factory.UserDaoFactoryBean&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>DI(Dependncy Injection) ：</strong>在容器中建立bean与bean之间的依赖关系，称为<strong>依赖注入</strong></p><h5 id="1、什么是IOC（控制反转）"><a href="#1、什么是IOC（控制反转）" class="headerlink" title="1、什么是IOC（控制反转）"></a><strong>1、什么是IOC（控制反转）</strong></h5><p> a）把对象创建和对象之间的调用过程，交给Spring进行管理</p><p> b）使用IOC目的：为了<strong>降低耦合度</strong></p><h5 id="2、IOC底层"><a href="#2、IOC底层" class="headerlink" title="2、IOC底层"></a><strong>2、IOC底层</strong></h5><p> a）XML 解析、工厂模式、反射</p><h5 id="3、Spring提供的IOC容器实现的两种方式（两个接口）"><a href="#3、Spring提供的IOC容器实现的两种方式（两个接口）" class="headerlink" title="3、Spring提供的IOC容器实现的两种方式（两个接口）"></a><strong>3、Spring提供的IOC容器实现的两种方式（两个接口）</strong></h5><p> a）BeanFactory接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取(或使用)对象时才会创建对象。）</p><p> b）ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</p><h4 id="二、IOC容器-Bean管理"><a href="#二、IOC容器-Bean管理" class="headerlink" title="二、IOC容器-Bean管理"></a>二、IOC容器-Bean管理</h4><h5 id="1、IOC操作Bean管理"><a href="#1、IOC操作Bean管理" class="headerlink" title="1、IOC操作Bean管理"></a>1、IOC操作Bean管理</h5><p> a）Bean管理就是两个操作：（1）Spring创建对象；（2）Spring注入属性</p><h5 id="2、基于XML配置文件创建对象"><a href="#2、基于XML配置文件创建对象" class="headerlink" title="2、基于XML配置文件创建对象"></a>2、基于XML配置文件创建对象</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 配置User对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、基于XML方式注入属性（DI：依赖注入（注入属性））"><a href="#3、基于XML方式注入属性（DI：依赖注入（注入属性））" class="headerlink" title="3、基于XML方式注入属性（DI：依赖注入（注入属性））"></a>3、基于XML方式注入属性（DI：依赖注入（注入属性））</h5><p>引入：向一个类传递数据方式有几种？   <strong>1.普通方法（set方法）      2.构造方法</strong></p><p>注入的数据类型：<strong>1.引用类型   2.简单类型(基本数据类型和String)</strong></p><p>故，依赖注入方式分四个情况：</p><p><strong>1.setter注入：  （1）简单类型  （2）引用类型</strong></p><p><strong>2.构造器注入：   （1）简单类型  （2）引用类型</strong></p><h6 id="a）setter方式注入简单类型"><a href="#a）setter方式注入简单类型" class="headerlink" title="a）setter方式注入简单类型"></a>a）setter方式注入简单类型</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在bean中定义引用类型并提供可访问的set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">        <span class="comment">//创建属性</span></span><br><span class="line">        <span class="keyword">private</span> String bname;</span><br><span class="line">        <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBname</span><span class="params">(String bname)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.bname = bname;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在配置中使用property标签value属性注入简单类型数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">        name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="b）setter注入引用数据类型"><a href="#b）setter注入引用数据类型" class="headerlink" title="b）setter注入引用数据类型"></a>b）setter注入引用数据类型</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="comment">//提供对应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">        System.out.println(<span class="string">&quot;service set ...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    7.配置service与dao的关系</span></span><br><span class="line"><span class="comment">property属性表示配置当前bean的属性、</span></span><br><span class="line"><span class="comment">name属性表示配置哪一个具体的属性 ref属性表示参照哪一个bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="c）有参构造器注入简单数据类型"><a href="#c）有参构造器注入简单数据类型" class="headerlink" title="c）有参构造器注入简单数据类型"></a>c）有参构造器注入简单数据类型</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在bean中定义引用类型属性并提供可访问的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">(String oname,String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置中使用constructor-arg标签ref属性注入引用类型对象 顺序不影响  标准书写 耦合度高--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优化如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决形参名称问题，与形参名不耦合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">10</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决参数类型重复，使用位置解决参数匹配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="d）有参构造注入引用数据类型"><a href="#d）有参构造注入引用数据类型" class="headerlink" title="d）有参构造注入引用数据类型"></a>d）有参构造注入引用数据类型</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao dao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao=bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置中使用constructor-arg标签ref属性注入引用类型对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="e）p名称空间注入（了解即可）"><a href="#e）p名称空间注入（了解即可）" class="headerlink" title="e）p名称空间注入（了解即可）"></a>e）p名称空间注入（了解即可）</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、添加p名称空间在配置文件头部--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>&lt;!<span class="attr">--在这里添加一行p--</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;very&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;good&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现</p><p>2.可选依赖使用setter注入进行，灵活性太强</p><p>3.Spring框架提倡使用构造器，第三方框架内部i大多采用构造器注入的形式，相对严谨</p><p>4.如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖注入</p><p>5.实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</p><p><strong>6.自己开发的模块推荐使用setter注入</strong></p><h5 id="4、注入空值和特殊符号"><a href="#4、注入空值和特殊符号" class="headerlink" title="4、注入空值和特殊符号"></a>4、注入空值和特殊符号</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--（1）null值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="comment">&lt;!--属性里边添加一个null标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--（2）特殊符号赋值--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--属性值包含特殊符号</span></span><br><span class="line"><span class="comment">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class="line"><span class="comment">       b 把带特殊符号内容写到CDATA</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5、注入属性-外部bean"><a href="#5、注入属性-外部bean" class="headerlink" title="5、注入属性-外部bean"></a>5、注入属性-外部bean</h5><p> a）创建两个类service和dao类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;<span class="comment">//service类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao类型属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add...............&quot;</span>);</span><br><span class="line">        userDao.update();<span class="comment">//调用dao方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;<span class="comment">//dao类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update...........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> b）在spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 service和dao对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入userDao对象</span></span><br><span class="line"><span class="comment">        name属性：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref属性：创建userDao对象bean标签id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6、基于XML方式注入内部bean和级联赋值"><a href="#6、基于XML方式注入内部bean和级联赋值" class="headerlink" title="6、基于XML方式注入内部bean和级联赋值"></a>6、基于XML方式注入内部bean和级联赋值</h5><h6 id="a）注入属性-内部bean"><a href="#a）注入属性-内部bean" class="headerlink" title="a）注入属性-内部bean"></a>a）注入属性-内部bean</h6><p>（1）一对多关系：部门和员工<br>一个部门有多个员工，一个员工属于一个部门（部门是一，员工是多）<br>（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在spring配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span><span class="comment">&lt;!--内部bean赋值--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;宣传部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="b）注入属性-级联赋值"><a href="#b）注入属性-级联赋值" class="headerlink" title="b）注入属性-级联赋值"></a>b）注入属性-级联赋值</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;公关部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式二：生成dept的get方法（get方法必须有！！）</span></span><br><span class="line">   <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> dept;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jams&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7、IOC-操作-Bean-管理——xml-注入集合属性"><a href="#7、IOC-操作-Bean-管理——xml-注入集合属性" class="headerlink" title="7、IOC 操作 Bean 管理——xml 注入集合属性"></a><strong>7、IOC 操作 Bean 管理——xml 注入集合属性</strong></h5><p>1、注入数组类型属性 2、注入 List 集合类型属性 3、注入 Map 集合类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">//1 数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="comment">//2 list集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">//3 map集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="comment">//4 set集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）在 spring 配置文件进行配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--list类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="8、在集合里面设置对象类型值"><a href="#8、在集合里面设置对象类型值" class="headerlink" title="8、在集合里面设置对象类型值"></a>8、在集合里面设置对象类型值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生所学多门课程</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Course&gt; courseList;<span class="comment">//创建集合</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourseList</span><span class="params">(List&lt;Course&gt; courseList)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.courseList = courseList;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多个course对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入list集合类型，值是对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步：在 spring 配置文件中引入名称空间 util--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span> &lt;!<span class="attr">--添加util名称空间--</span>&gt;</span></span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;  <span class="comment">&lt;!--添加util名称空间--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--第二步：使用 util 标签完成 list 集合注入提取--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把集合注入部分提取出来--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--1 提取list集合类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>易筋经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阴真经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阳神功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--2 提取list集合类型属性注入使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring框架学习-一-——Ioc容器管理&quot;&gt;&lt;a href=&quot;#Spring框架学习-一-——Ioc容器管理&quot; class=&quot;headerlink&quot; title=&quot;Spring框架学习(一)——Ioc容器管理&quot;&gt;&lt;/a&gt;Spring框架学习(一)——Ioc容器</summary>
      
    
    
    
    <category term="Spring学习笔记" scheme="http://example.com/categories/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Ioc容器" scheme="http://example.com/tags/Ioc%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Learn(二)</title>
    <link href="http://example.com/2022/11/01/Spring-Learn2/"/>
    <id>http://example.com/2022/11/01/Spring-Learn2/</id>
    <published>2022-11-01T11:15:23.000Z</published>
    <updated>2022-11-18T11:59:29.631Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring框架学习-二-—Ioc容器—Bean管理——基于XML（续集）"><a href="#Spring框架学习-二-—Ioc容器—Bean管理——基于XML（续集）" class="headerlink" title="Spring框架学习(二)—Ioc容器—Bean管理——基于XML（续集）"></a>Spring框架学习(二)—Ioc容器—Bean管理——基于XML（续集）</h4><h5 id="1、IOC-操作-Bean-管理（FactoryBean）"><a href="#1、IOC-操作-Bean-管理（FactoryBean）" class="headerlink" title="1、IOC 操作 Bean 管理（FactoryBean）"></a>1、<strong>IOC 操作 Bean 管理（FactoryBean）</strong></h5><h6 id="Spring-有两种类型-bean，一种普通-bean，另外一种工厂-bean（FactoryBean）"><a href="#Spring-有两种类型-bean，一种普通-bean，另外一种工厂-bean（FactoryBean）" class="headerlink" title="Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）"></a>Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</h6><p> <strong>普通 bean：在配置文件中定义 bean 类型就是返回类型</strong></p><p> <strong>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样 第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean 第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.factorybean.MyBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line"> <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);<span class="comment">//返回值类型可以不是定义的bean类型！</span></span><br><span class="line"> System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、IOC-操作-Bean-管理（bean-作用域）"><a href="#2、IOC-操作-Bean-管理（bean-作用域）" class="headerlink" title="2、IOC 操作 Bean 管理（bean 作用域）"></a>2、IOC 操作 Bean 管理（bean 作用域）</h5><p> 在 Spring 里面，默认情况下，bean 是单实例对象，下面进行作用域设置：</p><p>（1）在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</p><p>（2）scope 属性值 第一个值 默认值，singleton，表示是单实例对象 第二个值 prototype，表示是多实例对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="comment">&lt;!--设置为多实例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）singleton 和 prototype 区别</p><p> a）singleton 单实例，prototype 多实例</p><p> b）设置 scope 值是 singleton 时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong> ；设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建对象，<strong>在调用 getBean 方法时候创建多实例对象</strong></p><h5 id="3、IOC-操作-Bean-管理（bean-生命周期）"><a href="#3、IOC-操作-Bean-管理（bean-生命周期）" class="headerlink" title="3、IOC 操作 Bean 管理（bean 生命周期）"></a>3、IOC 操作 Bean 管理（bean 生命周期）</h5><h6 id="1、生命周期-：从对象创建到对象销毁的过程"><a href="#1、生命周期-：从对象创建到对象销毁的过程" class="headerlink" title="1、生命周期 ：从对象创建到对象销毁的过程"></a>1、生命周期 ：从对象创建到对象销毁的过程</h6><h6 id="2、bean-生命周期"><a href="#2、bean-生命周期" class="headerlink" title="2、bean 生命周期"></a>2、<strong>bean 生命周期</strong></h6><p> （1）通过构造器创建 bean 实例（无参数构造）</p><p> （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p> （3）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p> （4）bean 可以使用了（对象获取到了）</p><p> （5）当容器关闭前触发bean的销毁（需要进行配置销毁的方法）</p><p>或：</p><p><strong>·</strong> 初始化容器</p><p>1.创建对象（内存分配）</p><p>2.执行构造方法</p><p>3.执行属性注入（set操作）</p><p><strong>4.执行bean的初始化方法</strong></p><p><strong>·</strong> 使用bean</p><p>1.执行业务</p><p><strong>·</strong> 关闭/销毁容器</p><p><strong>1.执行bean的销毁方法</strong></p><h6 id="3、演示-bean-生命周期-两种方式-："><a href="#3、演示-bean-生命周期-两种方式-：" class="headerlink" title="3、演示 bean 生命周期(两种方式) ："></a>3、演示 bean 生命周期(两种方式) ：</h6><p>（1）手动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"> <span class="comment">//无参数构造</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> String oname;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.oname = oname;</span><br><span class="line"> System.out.println(<span class="string">&quot;第二步 调用 set 方法设置属性值&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的销毁的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;<span class="comment">//创建后置处理器实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件的bean参数配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span><span class="comment">&lt;!--配置初始化方法和销毁方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--这里就是通过set方式（注入属性）赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置后置处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ApplicationContext context =</span></span><br><span class="line"><span class="comment">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span></span><br><span class="line"><span class="comment">//要想看到销毁方法的执行，必须关闭IoC容器，使用ClassPathXmlApplication这个实现类</span></span><br><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line"><span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line">System.out.println(<span class="string">&quot;第四步 获取创建 bean 实例对象&quot;</span>);</span><br><span class="line">System.out.println(orders);</span><br><span class="line"><span class="comment">//(1)手动让 bean 实例销毁 强行关闭容器</span></span><br><span class="line">context.close();</span><br><span class="line">   <span class="comment">//(2)自动关闭 让JVM关闭前先关闭IoC容器 任何位置都可以 从而让bean实例销毁</span></span><br><span class="line">   <span class="comment">//context.registerShutdownHook(); //注册关闭钩子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）按照Spring的格式来写(实现<strong>InitializingBean</strong>, <strong>DisposableBean</strong>  接口)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>, InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookService save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookService bean 销毁操作 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookService bean 初始化操作 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ClassPathXmlApplicationContext b=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//(2)自动关闭 让JVM关闭前先关闭IoC容器 任何位置都可以 从而让bean实例销毁</span></span><br><span class="line">    b.registerShutdownHook(); <span class="comment">//注册关闭钩子</span></span><br><span class="line">    <span class="type">BookService</span> <span class="variable">service</span> <span class="operator">=</span>(BookService) b.getBean(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    service.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4、bean-的后置处理器，bean-生命周期有七步-（正常生命周期为五步，而配置后置处理器后为七步）"><a href="#4、bean-的后置处理器，bean-生命周期有七步-（正常生命周期为五步，而配置后置处理器后为七步）" class="headerlink" title="4、bean 的后置处理器，bean 生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）"></a>4、bean 的后置处理器，bean 生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）</h6><p> （1）通过构造器创建 bean 实例（无参数构造）</p><p> （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p> （3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</p><p> （4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p> （5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</p><p> （6）bean 可以使用了（对象获取到了）</p><p> （7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><h5 id="4、IOC-操作-Bean-管理-外部属性文件"><a href="#4、IOC-操作-Bean-管理-外部属性文件" class="headerlink" title="4、IOC 操作 Bean 管理(外部属性文件)"></a>4、IOC 操作 Bean 管理(外部属性文件)</h5><h6 id="方式一：直接配置数据库信息-：（1）配置Druid（德鲁伊）连接池-（2）引入Druid（德鲁伊）连接池依赖-jar-包"><a href="#方式一：直接配置数据库信息-：（1）配置Druid（德鲁伊）连接池-（2）引入Druid（德鲁伊）连接池依赖-jar-包" class="headerlink" title="方式一：直接配置数据库信息 ：（1）配置Druid（德鲁伊）连接池 （2）引入Druid（德鲁伊）连接池依赖 jar 包"></a>方式一：直接配置数据库信息 ：（1）配置Druid（德鲁伊）连接池 （2）引入Druid（德鲁伊）连接池依赖 jar 包</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--直接配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="方式二：引入外部属性文件配置数据库连接池"><a href="#方式二：引入外部属性文件配置数据库连接池" class="headerlink" title="方式二：引入外部属性文件配置数据库连接池"></a>方式二：引入外部属性文件配置数据库连接池</h6><p>（1）创建外部属性文件，properties 格式文件，写数据库信息（jdbc.properties）</p><pre><code>prop.driverClass=com.mysql.jdbc.Driverprop.url=jdbc:mysql://localhost:3306/userDbprop.userName=rootprop.password=root</code></pre><p>（2）把外部 properties 属性文件引入到 spring 配置文件中 —— 引入 context 名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="comment">&lt;!--引入context名称空间--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-自动装配"><a href="#5-自动装配" class="headerlink" title="5.自动装配"></a>5.自动装配</h5><p>配置中使用bean标签autowire属性设置自动装配的类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    自动装配 autowire属性：byType按类型 byName按名称  要求dao的bean只能有一个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    自动装配 autowire属性：byType按类型 byName按名称  当dao的bean有多个时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byNmae&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>自动装配使用引用类型依赖注入，不能对简单类型进行操作</p><p>使用自动装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</p><p>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</p><p><strong>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配失效</strong></p><h5 id="6-管理第三方Bean"><a href="#6-管理第三方Bean" class="headerlink" title="6.管理第三方Bean"></a>6.管理第三方Bean</h5><p>导入druid的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据源对象作为Spring管理的bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    管理DruidDataSource对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;457631&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-加载properties文件"><a href="#7-加载properties文件" class="headerlink" title="7.加载properties文件"></a>7.加载properties文件</h5><p>（1）新增context命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）使用context空间加载properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- property-placeholder表示占位符 system-properties-mode属性规定是否加载系统属性值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多个配置文件时 规范模式--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>（3）使用属性占位符${}读取properties文件中的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</p><p>ApplicationContext接口是Spring容器核心接口，初始化bean时立即加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--改为延迟加载 lazy-init属性控制bean延迟加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ApplicationContext接口提供基础的bean操作相关方法，通过接口扩展其他功能</p><p>ApplicationContext接口常用初始类：</p><p>​    ClassPathXmlApplicationContext</p><p>​    FileSystemXmlApplicationContext</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Spring框架学习-二-—Ioc容器—Bean管理——基于XML（续集）&quot;&gt;&lt;a href=&quot;#Spring框架学习-二-—Ioc容器—Bean管理——基于XML（续集）&quot; class=&quot;headerlink&quot; title=&quot;Spring框架学习(二)—Ioc容</summary>
      
    
    
    
    <category term="Spring学习笔记" scheme="http://example.com/categories/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Ioc容器" scheme="http://example.com/tags/Ioc%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Excel Learn</title>
    <link href="http://example.com/2022/10/27/Excel-Learn/"/>
    <id>http://example.com/2022/10/27/Excel-Learn/</id>
    <published>2022-10-27T12:48:50.000Z</published>
    <updated>2022-10-27T12:59:10.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Excel表格的基本操作一：修改字体"><a href="#Excel表格的基本操作一：修改字体" class="headerlink" title="Excel表格的基本操作一：修改字体"></a>Excel表格的基本操作一：修改字体</h4><p>　　首先，从输入开始，先来调整字体吧。在工具栏那里一开始就可以发现字体的工具框了，在这里可以快速更改字体类型、大小、颜色等等的。</p><h4 id="Excel表格的基本操作二：更改对齐方式"><a href="#Excel表格的基本操作二：更改对齐方式" class="headerlink" title="Excel表格的基本操作二：更改对齐方式"></a>Excel表格的基本操作二：更改对齐方式</h4><p>　　打好字，或者打字之前，都需要按照需要来调整字体的对齐方式的。在对齐方式工具栏中，可以快速随意地更改字体对齐方式，第一个小框中上三个图标是调整横向对齐的，下三个是调整纵向对齐的。而第二个框中还有一键调整字体的排列方向，第三个框中可以一键设置自动换行等。</p><h4 id="Excel表格的基本操作三：添加符号"><a href="#Excel表格的基本操作三：添加符号" class="headerlink" title="Excel表格的基本操作三：添加符号"></a>Excel表格的基本操作三：添加符号</h4><p>　　如果想要输入一些数据制作消费统计表的话，那么就要输入￥这个符号了，一次次输入太麻烦了，直接在数字框那里，第一个就是货币的标志了，可以选择一批数据，批量添加呢。当然百分号、小数点也可以在那里快速修改。</p><h4 id="Excel表格的基本操作四：插入和删除单元格"><a href="#Excel表格的基本操作四：插入和删除单元格" class="headerlink" title="Excel表格的基本操作四：插入和删除单元格"></a>Excel表格的基本操作四：插入和删除单元格</h4><p>　　在单元格工具框中，可以快速一键插入或删除单元格。比如，有时输入的时候，输漏了一行数据，在这里点击插入下面的小三角，选择插入行就OK啦。</p><h4 id="Excel表格的基本操作五：常用函数一键搞定"><a href="#Excel表格的基本操作五：常用函数一键搞定" class="headerlink" title="Excel表格的基本操作五：常用函数一键搞定"></a>Excel表格的基本操作五：常用<a href="https://link.zhihu.com/?target=https://www.xuexila.com/excel/hanshu/">函数</a>一键搞定</h4><p>　　如果需要求某几个单元格的和或者积之类的，那么就要用到公式了，但是不懂公式咋办?直接在在编辑框里面的第一个里找就可以了，点击求和(默认是求和的)的小三角，然后选择其他函数，就能直接找到自己想要的函数了。</p><h4 id="Excel表格的基本操作六：快速求和、求平均值"><a href="#Excel表格的基本操作六：快速求和、求平均值" class="headerlink" title="Excel表格的基本操作六：快速求和、求平均值"></a>Excel表格的基本操作六：快速求和、求平均值</h4><p>　　想要直接知道某几个数的和或者平均值，那么直接选中那几个数就可以知道了。选择之后，在最下方的状态栏中，就有求和、平均值、和计数显示。</p><h4 id="Excel表格的基本操作七：如何输入身份证号等长数字"><a href="#Excel表格的基本操作七：如何输入身份证号等长数字" class="headerlink" title="Excel表格的基本操作七：如何输入身份证号等长数字?"></a>Excel表格的基本操作七：如何输入身份证号等长数字?</h4><p>　　输入一行长的数字怎么自动变样了?例如，我输入一行身份证号，变成都变成看不懂了?想要输入一行长的数字怎么办?这个简单，只要更改一下数字种类就可以了。选中单元格，然后选择“设置单元格格式”，把数字的种类改成“文本”。设置好之后，再输入的话，无论多长的数字，都不会变样的。</p><p>　　温馨提示，记得是先设置好格式再输入，不然第十四位数之后的数字都回变成0的。</p><h4 id="Excel表格的基本操作八：格式刷"><a href="#Excel表格的基本操作八：格式刷" class="headerlink" title="Excel表格的基本操作八：格式刷"></a>Excel表格的基本操作八：格式刷</h4><p>　　例如七所说的，设置好了，但是要一个一个修改，数量少的话还好，数量庞大得话，就那么就悲剧了。没事，用格式刷就OK了，在工具栏“开始”的第一个框中。格式刷的使用很简单，只要点击一下格式刷，然后在选择要复制的格式，最后就是选择要修改的个单元格了，可以批量修改的哦。</p><h4 id="Excel表格的基本操作：快速一键制表"><a href="#Excel表格的基本操作：快速一键制表" class="headerlink" title="Excel表格的基本操作：快速一键制表"></a>Excel表格的基本操作：快速一键制表</h4><p>　　没有制过表的人，是否感觉制表很复制，或者很麻烦?其实不然，在Excel表格中，只要一键就能制表。选中一些数据，然后在上方工具栏中选择“插入”，再打开“图表”，最后根据自己的需要，选择表格样式就能轻松制成专业的表格了。</p><h4 id="Excel表格的基本操作十：快速复制粘贴"><a href="#Excel表格的基本操作十：快速复制粘贴" class="headerlink" title="Excel表格的基本操作十：快速复制粘贴"></a>Excel表格的基本操作十：快速复制粘贴</h4><p>　　当你在输入数据中，如果需要输入1、2、3……这样按顺序的数字的时候，一个一个输入，太麻烦了，想省点功夫，是否有法?有的，只要使用<a href="https://link.zhihu.com/?target=https://www.xuexila.com/diannao/yingjian/shujian/">鼠标</a>一拖，就完事了。选中一个或一些数据，然后把光标移到选中框的右下角，光标变成一个加号的时候，向下拖动，就会智能帮你填1、2、3……了。(温馨提示，这个一拖的功能还有格式刷的作用。)</p><h5 id="常见快捷键："><a href="#常见快捷键：" class="headerlink" title="常见快捷键："></a>常见快捷键：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- Ctrl+A：直接选中并选择整个表格区域，复制数据的时候是不是再不用按着鼠标左键一直拉到手软了；</span><br><span class="line">- Ctrl+Shift+上/下：选中光标所在的列所有的数据；</span><br><span class="line">- Ctrl+Shift+左/右：选中光标所在的行所有的数据；</span><br><span class="line">- Ctrl+Fn+”pg up”/”pg down”：瞬间切换至上一个或下一个工作sheet，这几乎是甩掉鼠标的高频快捷键；</span><br><span class="line">- Alt+F1：可以立即创建当前数据范围内的图表；</span><br><span class="line">- F2：编辑活动单元格并将插入点放在单元格内容的结尾，再也不用双击单元格去编辑了；</span><br><span class="line">- Shift+F3：显示插入函数对话框，不用每次需要插入函数就用鼠标去工具栏一个一个找了；</span><br><span class="line">- F4：重复上一个命令或操作，一个变态般存在的快捷键；</span><br><span class="line">- Ctrl+F4：关闭当前的工作簿，连叉号都不用点了有没有。</span><br></pre></td></tr></table></figure><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="1-MID函数"><a href="#1-MID函数" class="headerlink" title="1.MID函数"></a><strong>1.MID函数</strong></h2><p><strong>函数定义：</strong>从一个文本字符串的指定位置开始,截取指定数目的字符</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MID(text, start_num, num_chars)</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-57eb8937c340e296b3ce3f18a2a053b3_1440w.webp" alt="img"></p><h2 id="2-CONCATENATE函数"><a href="#2-CONCATENATE函数" class="headerlink" title="2.CONCATENATE函数"></a><strong>2.CONCATENATE函数</strong></h2><p><strong>函数定义：</strong>将多个字符文本或单元格中的数据连接在一起,显示在一个单元格中</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONCATENATE(text1,text2,……)</span><br></pre></td></tr></table></figure><p><strong>重点：</strong>也可以用&amp;（和号）运算符代替函数CONCATENATE实现文本项的合并.</p><p><strong>例子：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-edf47392d172912527ceda7ca3fb77e3_1440w.webp" alt="img"></p><h2 id="3-AND函数"><a href="#3-AND函数" class="headerlink" title="3. AND函数"></a>3. AND函数</h2><p><strong>函数定义：</strong>检测所有的条件是否为真</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AND(logical1,logical2,……logical30)</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>（1）如果指定的区域中不包含逻辑值或数值时,函数AND返回错误值#VALUE!.</p><p>（2）Logical1,logical2,……logical30表示待检测的1到30个条件值,各条件值可为TRUE或FALSE。</p><p><strong>例子：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-d5a89b3d22a700fc859ab04c4dc0b433_1440w.webp" alt="img"></p><p>可以与IF函数连用</p><p><img src="https://pic1.zhimg.com/80/v2-af914bf217b12b174680f939acdbf5d4_1440w.webp" alt="img"></p><h2 id="4-IF函数"><a href="#4-IF函数" class="headerlink" title="4. IF函数"></a><strong>4. IF函数</strong></h2><p><strong>函数定义：</strong>根据条件满足与否返回不同的值</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(logical_test,value_if_true,value_if_false)</span><br></pre></td></tr></table></figure><p><strong>白话：</strong>IF(条件,与条件一样时运算这个,与条件不同时运算这个)</p><p><strong>例子：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-39240ca26b83ab4f14bee048f47f86a5_1440w.webp" alt="img"></p><p>常规用法</p><p><img src="https://pic4.zhimg.com/80/v2-a04ad6310e048561af0a0fdd26132d63_1440w.webp" alt="img"></p><p>嵌套使用</p><p>公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;=IF(C13&gt;=$H$10,$I$10,IF(C13&gt;=$H$9,$I$9,IF(C13&gt;=$H$8,$I$8,IF(C13&gt;=$H$7,$I$7,IF(C13&gt;=$H$6,$I$6,IF(C13&gt;=$H$5,$I$5,0))))))</span><br></pre></td></tr></table></figure><h2 id="5-DATEDIF函数"><a href="#5-DATEDIF函数" class="headerlink" title="5. DATEDIF函数"></a>5. DATEDIF函数</h2><p><strong>函数定义：</strong>计算期间内的年数、月数、天数</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATEDIF(start_date,end_date,&quot;y&quot;)、=DATEDIF(start_date,end_date,&quot;m&quot;)、=DATEDIF(start_date,end_date,&quot;d&quot;)、、=DATEDIF(start_date,end_date,&quot;ym&quot;)、=DATEDIF(start_date,end_date,&quot;yd&quot;)、=DATEDIF(date1,date2,&quot;md&quot;)</span><br></pre></td></tr></table></figure><p><strong>白话：</strong>DATEDIF(开始日期,结束日期,要计算的单位)</p><p><strong>注意：</strong></p><p>y:计算满年数,返回值为0以上的整数;m:计算满月数,返回值为0以上的整数;d:计算满日数,返回值为0以上的整数;ym:计算不满一年的月数,返回值为1<del>11之间的整数;yd计算不满一年的天数,返回值为0</del>365之间的整数;md:计算不满意一个月的天数,返回值为0~30之间的整数.</p><p><strong>例子：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-e1f950ac6a5be6b44e3260076fa865f1_1440w.webp" alt="img"></p><h2 id="6-COUNTIF函数"><a href="#6-COUNTIF函数" class="headerlink" title="6. COUNTIF函数"></a>6. COUNTIF函数</h2><p><strong>函数定义：</strong>计算满足条件的单元格计数</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COUNTIF(range,criteria)</span><br></pre></td></tr></table></figure><p><strong>白话：</strong>COUNTIF(要找的内容所在的区域,要找的内容)</p><p><strong>注意事项：</strong></p><p>指定的条件必须用 “ “ (双引号括起来),如 “&gt;=100、”男” 等.但,当指定条件为引用单元格时无需双引号括住.通配符使用参看SUMIF函数中的通配符说明.</p><p><strong>例子：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-a344f45615a87c7c289a625bbc6a9d71_1440w.webp" alt="img"></p><p><strong>COUNTIF函数几种用法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 求包含值139的单元格数量 &#x27;=COUNTIF($D$4:$D$14,139)</span><br><span class="line">2. 求包含负值的单元格数量 &#x27;=COUNTIF($C$4:$C$14,&quot;&lt;0&quot;)</span><br><span class="line">3. 求不等于0 的单元格数量 &#x27;=COUNTIF($C$4:$C$14,&quot;&lt;&gt;0&quot;)</span><br><span class="line">4. 求大于等于5的单元格数量 &#x27;=COUNTIF($C$4:$C$14,&quot;&gt;=5&quot;)</span><br><span class="line">5. 求等于单元格B45中内容的单元格数量 &#x27;=COUNTIF($B$4:$B$14,B4)</span><br><span class="line">6. 求大于单元格E45中内容的单元格数量 &#x27;=COUNTIF($E$4:$E$14,&quot;&gt;&quot;&amp;E4)</span><br><span class="line">7. 求包含文本内容的单元格数量 &#x27;=COUNTIF($B$4:$B$14,&quot;*&quot;)</span><br><span class="line">8. 求包含六个字符内容的单元格数量 &#x27;=COUNTIF($B$4:$B$14,&quot;??????&quot;)</span><br><span class="line">9. 求在文本中任何位置包含单词&quot;文胸&quot;字符内容的单元格数量 &#x27;=COUNTIF($B$4:$B$14,&quot;*文胸*&quot;)</span><br><span class="line">10. 求包含以英文&quot;D&quot;(不分大小写)开头内容的单元格数量 &#x27;=COUNTIF($B$4:$B$14,&quot;D*&quot;)</span><br><span class="line">11. 求包含当前日期的单元格数量 &#x27;=COUNTIF($E$4:$E$14,TODAY())</span><br><span class="line">12. 求大于平均值的单元格数量 &#x27;=COUNTIF($D$4:$D$14,&quot;&gt;&quot;&amp;AVERAGE($D$5:$D$14))</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-c05e01d7137cbaaf89c226a526db68ce_1440w.webp" alt="img"></p><p>与IF连用的几种查找方式</p><p><strong>统计区域内不重复数据数</strong></p><p><img src="https://pic2.zhimg.com/80/v2-f90c6ec37ed9f820e90460caa548652d_1440w.webp" alt="img"></p><p>公式：’{=SUM(1/COUNTIF(D5:D14,D5:D14))}</p><p>这里其实输入的是=SUM(1/COUNTIF(D5:D14,D5:D14))，然后按ctrl+shift+enter三键结束。</p><p>下面公式加了IF判断是否是空格的嵌套,避免出现#DIV/0!错误.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#123;&#123;=SUM(IF(D5:D14&lt;&gt;&quot;&quot;,1/COUNTIF(D5:D14,D5:D14)))&#125;&#125;</span><br></pre></td></tr></table></figure><p>或者可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUM(IF(ISBLANK(D5:D14),&quot;&quot;,1/COUNTIF(D5:D14,D5:D14))),然后按ctrl+shift+enter三键结束。</span><br></pre></td></tr></table></figure><h2 id="7-SUMIF函数"><a href="#7-SUMIF函数" class="headerlink" title="7. SUMIF函数"></a>7. SUMIF函数</h2><p><strong>函数定义：</strong>对满足条件的单元格的数值求和</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUMIF(range,criteria,sum_range)</span><br></pre></td></tr></table></figure><p><strong>参数解释：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">range：为用于条件判断的单元格区域.指定作为搜索对象的单元格区域.</span><br><span class="line"></span><br><span class="line">Criteria：为确定哪些单元格将被相加求和的条件,其形式可以为数字、表达式、文本或通配符.</span><br><span class="line"></span><br><span class="line">Sum_range：是需要求和的实际单元格</span><br></pre></td></tr></table></figure><p><strong>几种基本用法：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-c1c3a75984f8322618260c5cfbc666a7_1440w.webp" alt="img"></p><p>（1）以“文胸”开头的任意文本的销量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIF($B$4:$B$14,&quot;文胸*&quot;,$C$4:$C$14)</span><br></pre></td></tr></table></figure><p>注意：如果是“文胸~<em>”，则此时的“</em>”就是字符，不是通配符，需要准确查找文本为“文胸*”的销量合计。</p><p>（2）“文胸”后面一定是三个字符的文本的销量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIF($B$4:$B$4,&quot;文胸???&quot;,$C$4:$C$4)</span><br></pre></td></tr></table></figure><p>注意：如果是“文胸~???”，则此时的“?”就是字符，不是通配符，需要准确查找文本为“文胸???”的销量合计。</p><p>（3）销售大于等于5件的销售合计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIF($C$4:$C$14,&quot;&gt;=5&quot;,$C$4:$C$14)</span><br></pre></td></tr></table></figure><p>（4）查找内容为c20的销售合计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIF($B$4:$B$14,C20,$C$4:$C$14)</span><br></pre></td></tr></table></figure><h2 id="8-DCOUNT函数"><a href="#8-DCOUNT函数" class="headerlink" title="8. DCOUNT函数"></a>8. DCOUNT函数</h2><p><strong>函数定义：</strong>计算满足条件的数值的个数</p><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DCOUNT(database,field,criteria)</span><br></pre></td></tr></table></figure><p><strong>参数定义：</strong></p><p>database: 构成列表或数据库的单元格区域.数据库是包含一组相关数据的列表,其中包含相关信息的行为记录,而包含数据的列为字段.列表的第一行包含着每一列的标志项.</p><p>Field: 指定函数所使用的数据列.列表中的数据列必须在第一行具有标志项.Field可以是文本,即两端带引号的标志项,如”使用年数”或”产量”；此外,Field也可以是代表列表中数据列位置的数字：1表示第一列,2表示第二列,等等.</p><p>Criteria: 为一组包含给定条件的单元格区域.可以为参数criteria指定任意区域,只要它至少包含一个列标志和列标志下方用于设定条件的单元格.</p><p><strong>注意：</strong></p><p>参数field为可选项,如果省略,函数DCOUNT返回数据库中满足条件criteria的所有记录数.</p><p><strong>例子：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-8269901bfbf357487e80862f2018a56e_1440w.webp" alt="img"></p><p>公式：</p><p>（1）指定项目的有效支出</p><p>=DCOUNT(B3:E9,E3,G3:G4)</p><p>这里的结果是2，返回的是10月8日和10月10日的值。</p><p>（2）指定项目的支出</p><p>=DCOUNT(B3:E9,,G3:G4)</p><p>参数field为可选项,如果省略,函数DCOUNT返回数据库中满足条件criteria的所有记录数.</p><p>这里的结果是3，返回的是10月8日，10月10日和10月15日的值。</p><h2 id="9-ISERROR函数"><a href="#9-ISERROR函数" class="headerlink" title="9. ISERROR函数"></a>9. ISERROR函数</h2><p><strong>函数定义：</strong>查看是否为错误，查看是否值为任意错误值(#N/A、#VALUE!、#REF!、#DIV/0!、#NUM!、#NAME?或#NULL!).</p><p><strong>使用格式：</strong>ISERROR(value)</p><p><strong>参数定义：</strong>value为需要进行检验的数值。</p><p><strong>注意事项：</strong></p><p>（1）IS类函数的参数value是不可转换的.</p><p>（2）IS类函数在用公式检验计算结果时十分有用.当它与函数IF结合在一起使用时,可以提供一种方法用来在公式中查出错误值.</p><p>这个函数比较简单，大家可以随意试一下。</p><h2 id="10-VLOOKUP函数（敲黑板，重点！！）"><a href="#10-VLOOKUP函数（敲黑板，重点！！）" class="headerlink" title="10. VLOOKUP函数（敲黑板，重点！！）"></a>10. VLOOKUP函数（敲黑板，重点！！）</h2><p><strong>函数定义：</strong>按照垂直方向搜索区域</p><p><strong>使用格式：</strong>VLOOKUP(lookup_value,table_array,col_index_num,range_lookup)</p><p><strong>参数定义：</strong></p><p>Lookup_value：为需要在数组第一列中查找的数值.Lookup_value可以为数值、引用或文本字符串.</p><p>Table_array: 为需要在其中查找数据的数据表.可以使用对区域或区域名称的引用,例如数据库或列表.</p><p>Col_index: 为table_array中待返回的匹配值的列序号. Col_index_num为1时,返回table_array第一列中的数值；col_index_num为2,返回table_array第二列中的数值,以此类推.如果col_index_num小于1,函数VLOOKUP返回错误值值#VALUE!；如果col_index_num大于table_array的列数, 函数VLOOKUP返回错误值#REF!.</p><p>Range_lookup：为一逻辑值,指明函数VLOOKUP返回时是精确匹配还是近似匹配.如果为TRUE或省略,则返回近似匹配值.也就是说.如果找不到精确匹配值,则返回小于lookup_value的最大数值；如果range_value为FALSE,函数VLOOKUP将返回精确匹配值.如果找不到,则返回错误值#N/A.</p><p><strong>注意：</strong></p><ol><li>如果range_lookup为TRUE,则table_array的第一列中的数值必须按升序排列：…、 -2、-1、0、1、2、…、-Z、FALSE、TRUE；否则,函数VLOOKUP不能返回正确的数值.如果range_lookup为FALSE,table_array不必进行排序.</li><li>Table_array的第一列中的数值可以为文本、数字或逻辑值.</li><li>文本不区分大小写.</li><li>如果函数VLOOKUP找不到lookup_value,且range_lookup为TRUE,则使用小于等于lookup_value的最大值.</li><li>如果lookup_value小于table_array第一列中的最小数值,函数VLOOKUP返回错误值#N/A.</li><li>如果函数VLOOKUP找不到lookup_value且range_lookup为FALSE,函数VLOOKUP返回错误值#N/A.</li><li>若有多个符合条件的情况:vlookup返回的是第一个满足条件的值,lookup返回的是最后一个满足条件的值.</li></ol><p><strong>例子：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-9ca4b8e5cb3c30d586e2f7bccb614602_1440w.webp" alt="img"></p><p>公式：</p><p>=VLOOKUP(H5,B5:D13,3,0)</p><p>精确查找是vlookup最基本也是最常用的功能,对于数据量大的查找,其速度比菜单中的查找还快.设置vlookup第四个参数为false或0,即为精确查找.</p><h2 id="11-LEN函数"><a href="#11-LEN函数" class="headerlink" title="11. LEN函数"></a>11. LEN函数</h2><p><strong>函数定义：</strong>统计文本字符串中字符数目(计算文本的长度)</p><p><strong>使用格式：</strong>LEN(text)</p><p><strong>参数定义：</strong>是要查找其长度的文本.空格将作为字符进行计数.</p><p><strong>例子：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-6588d8b4b22dbc56d6d33dcfa90358f5_1440w.webp" alt="img"></p><p>=LEN(B13)，结果为7.</p><h2 id="12-SEARCH函数"><a href="#12-SEARCH函数" class="headerlink" title="12. SEARCH函数"></a>12. SEARCH函数</h2><p><strong>函数定义：</strong>检索字符位置(不区分大小写)</p><p><strong>使用格式：</strong>SEARCH(find_text,within_text,start_num)</p><p><strong>参数定义：</strong></p><p>Find_text：是要查找的文本.可以在find_text中使用通配符,包括问号(?)和星号(*).问号可匹配任意的单个字符,星号可匹配任意一串字符.如果要查找真正的问号或星号,请在该字符前键入波形符(~).</p><p>Within_text：是要在其中查找find_text的文本.</p><p>Start_num：是within_text中开始查找的字符的编号.</p><p><strong>要点：</strong></p><p>使用start_num可跳过指定数目的字符.例如,假定使用文本字符 AYF0093.YoungMensApparel, 如果要查找文本字符串中说明部分的第一个Y的编号,则可将start_num设置为8,这样就不会查找文本的序列号部分.SEARCH将从第8个字符开始查找,而在下一个字符处即可找到find_text,于是返回编号9.SEARCH总是从within_text的起始处返回字符编号,如果start_num大于1,也会对跳过的字符进行计数.</p><p><strong>注意事项：</strong></p><p>（1）SEARCH和SEARCHB在查找文本时不区分大小写.</p><p>（2）SEARCH和SEARCHB类似于FIND和FINDB,但FIND和FINDB区分大小写.</p><p>（3）如果没有找到find_text,则返回错误值#VALUE!.</p><p>（4）如果忽略start_num,则假定其为1.</p><p>（5）如果start_num不大于0(零)或大于within_text,则返回错误值#VALUE!.</p><h2 id="13-FREQUENCY函数"><a href="#13-FREQUENCY函数" class="headerlink" title="13. FREQUENCY函数"></a>13. FREQUENCY函数</h2><p><strong>函数定义：</strong>计算区间里所含数值的个数</p><p><strong>使用格式：</strong>FREQUENCY(data_array,bins_array)</p><p><strong>参数定义：</strong></p><p>Data_array：为一数组或对一组数值的引用,用来计算频率.如果data_array中不包含任何数值,函数FREQUENCY返回零数组.</p><p>Bins_array:为间隔的数组或对间隔的引用,该间隔用于对data_array中的数值进行分组.如果bins_array中不包含任何数值,函数FREQUENCY返回data_array中元素的个数.</p><p><strong>例子：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-76afcb4b86835567d6f1afb2d3215f83_1440w.webp" alt="img"></p><p>公式：{=FREQUENCY($C$19:$C$30,$E$19:$E$23)}</p><h2 id="14-INDEX函数"><a href="#14-INDEX函数" class="headerlink" title="14. INDEX函数"></a>14. INDEX函数</h2><p>14a. INDEX函数（数组形式）</p><p><strong>函数定义：</strong>(数组形式)返回行和列交叉位置的值</p><p><strong>使用格式：</strong>INDEX(array,row_num,column_num)</p><p><strong>参数定义：</strong></p><p>Array: 为单元格区域或数组常量.如果数组只包含一行或一列,则相对应的参数row_num或column_num为可选.如果数组有多行和多列,但只使用row_num或column_num,函数INDEX返回数组中的整行或整列,且返回值也为数组.</p><p>Row_num: 数组中某行的行序号,函数从该行返回数值.如果省略row_num,则必须有column_num.</p><p>Column_num: 数组中某列的列序号,函数从该列返回数值.如果省略column_num,则必须有row_num.</p><p><strong>要点：</strong></p><p>（1）INDEX函数有两种语法形式：数组和引用.数组形式通常返回数值或数值数组,引用形式通常返回引用.当函数INDEX的第一个参数为数组常数时,使用数组形式.</p><p>（2）此处的行序号参数(row_num)和列序号参数(column_num)是相对于所引用的单元格区域而言的,不是Excel工作表中的行或列序号.</p><p><strong>注意：</strong></p><p>1.如果同时使用row_num和column_num,函数INDEX返回row_num和column_num交叉处的单元格的数值.</p><p>2.如果将row_num或column_num设置为0,函数INDEX则分别返回整个列或行的数组数值.若要使用以数组形式返回的值,请将INDEX函数以数组公式形式输入,对于行以水平单元格区域的形式输入,对于列以垂直单元格区域的形式输入.若要输入数组公式,请按Ctrl+Shift+Enter.</p><p>3.Row_num和column_num必须指向array中的某一单元格；否则,函数INDEX返回错误值#REF!.</p><p>14b. INDEX函数（引用形式）</p><p><strong>函数定义：</strong>(单元格引用方式)返回行和列交差位置的单元格引用</p><p><strong>使用格式：</strong>INDEX(reference,row_num,column_num,area_num)</p><p><strong>参数定义：</strong></p><p>Reference：对一个或多个单元格区域的引用,如果为引用输入一个不连续的区域,必须用括号括起来.如果引用中的每个区域只包含一行或一列,则相应的参数row_num或column_num分别为可选项.例如,对于单行的引用,可以使用函数INDEX(reference,,column_num).</p><p>Row_num：引用中某行的行序号,函数从该行返回一个引用.</p><p>Column_num：引用中某列的列序号,函数从该列返回一个引用.</p><p>Area_num：选择引用中的一个区域,并返回该区域中row_num和column_num的交叉区域.选中或输入的第一个区域序号为1,第二个为2,以此类推.如果省略area_num,函数INDEX使用区域1.</p><p><strong>注意事项：</strong></p><p>（1）在通过reference和area_num选择了特定的区域后,row_num和column_num将进一步选择指定的单元格：row_num1为区域的首行,column_num1为首列,以此类推.函数INDEX返回的引用即为row_num和column_num的交叉区域.</p><p>（2）如果将row_num或column_num设置为0,函数INDEX分别返回对整个列或行的引用.</p><p>（3）Row_num、column_num和area_num必须指向reference中的单元格；否则,函数INDEX返回错误值#REF!.如果省略row_num和column_num,函数INDEX返回由area_num所指定的区域.</p><p>（4）函数INDEX的结果为一个引用,且在其他公式中也被解释为引用.根据公式的需要,函数INDEX的返回值可以作为引用或是数值.例如,公式CELL(“width”,INDEX(A1:B2,1,2))等价于公式CELL(“width”,B1).CELL函数将函数INDEX的返回值作为单元格引用.而在另一方面,公式2*INDEX(A1:B2,1,2)将函数INDEX的返回值解释为B1单元格中的数字.</p><p><strong>例子：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-b78fc1d96bcce9a27e3529001065c296_1440w.webp" alt="img"></p><p>公式：=INDEX((B4:D12,G4:H5),2,2,2)</p><p>返回的是第二个区域的值。</p><h2 id="15-MATCH函数"><a href="#15-MATCH函数" class="headerlink" title="15. MATCH函数"></a>15. MATCH函数</h2><p><strong>函数定义：</strong>返回搜索值的相对位置</p><p><strong>引用形式：</strong>MATCH(lookup_value,lookup_array,match_type)</p><p><strong>参数定义：</strong></p><p>Lookup_value：为需要在数据表中查找的数值.为需要在Look_array中查找的数值.可以为数值(数字、文本或逻辑值)或对数字、文本或逻辑值的单元格引用.</p><p>Lookup_array：可能包含所要查找的数值的连续单元格区域.Lookup_array应为数组或数组引用.</p><p>Match_type：为数字-1、0或1.Match-type指明MicrosoftExcel如何在lookup_array中查找lookup_value.</p><p><strong>要点：</strong></p><p>函数MATCH返回lookup_array中目标值的位置,而不是数值本身.例如,MATCH(“b”,{“a”,”b”,”c”},0)返回2,即“b”在数组{“a”,”b”,”c”}中的相应位置.</p><p><strong>注意事项：</strong></p><p>（1）如果match_type为1,函数MATCH查找小于或等于lookup_value的最大数值.Lookup_array必须按升序排列：…、-2、-1、0、1、2、…、A-Z、FALSE、TRUE.</p><p>（2）如果match_type为0,函数MATCH查找等于lookup_value的第一个数值.Lookup_array可以按任何顺序排列.</p><p>（3）如果match_type为-1,函数MATCH查找大于或等于lookup_value的最小数值. Lookup_array必须按降序排列：TRUE、FALSE、Z-A、…、2、1、0、-1、-2、…,等等.</p><p>（4）如果省略match_type,则假设为1.</p><p>（5）查找文本值时,函数MATCH不区分大小写字母.</p><p>（6）如果函数MATCH查找不成功,则返回错误值#N/A.</p><p>（7）如果match_type为0且lookup_value为文本,lookup_value可以包含通配符、星号(*)和问号(?).星号可以匹配任何字符序列；问号可以匹配单个字符.</p><p><strong>例子：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-9483199603659681b85359677a7abd8c_1440w.webp" alt="img"></p><p>公式：</p><p>‘=MATCH(F5,B5:B14,1)</p><h2 id="16-OFFSET函数"><a href="#16-OFFSET函数" class="headerlink" title="16. OFFSET函数"></a>16. OFFSET函数</h2><p><strong>函数定义：</strong>计算指定位置的单元格引用</p><p><strong>使用格式：</strong>OFFSET(reference,rows,cols,height,width)</p><p><strong>参数定义：</strong></p><p>Reference：作为偏移量参照系的引用区域.Reference必须为对单元格或相连单元格区域的引用；否则,函数OFFSET返回错误值#VALUE!.</p><p>Rows：相对于偏移量参照系的左上角单元格,上(下)偏移的行数.如果使用5作为参数Rows,则说明目标引用区域的左上角单元格比reference低5行.行数可为正数(代表在起始引用的下方)或负数(代表在起始引用的上方).</p><p>Cols：相对于偏移量参照系的左上角单元格,左(右)偏移的列数.如果使用5作为参数Cols,则说明目标引用区域的左上角的单元格比reference靠右5列.列数可为正数(代表在起始引用的右边)或负数(代表在起始引用的左边).</p><p>Height：高度,即所要返回的引用区域的行数.Height必须为正数.</p><p>Width：宽度,即所要返回的引用区域的列数.Width必须为正数.</p><p><strong>注意事项：</strong></p><p>（1）如果行数和列数偏移量超出工作表边缘,函数OFFSET返回错误值#REF!.</p><p>（2）如果省略height或width,则假设其高度或宽度与reference相同.</p><p>（3）函数OFFSET实际上并不移动任何单元格或更改选定区域,它只是返回一个引用.函数OFFSET可用于任何需要将引用作为参数的函数.例如,公式SUM(OFFSET(C2,1,2,3,1))将计算比单元格C2靠下1行并靠右2列的3行1列的区域的总值.</p><p><img src="https://pic2.zhimg.com/80/v2-99f51d5dc5179c2e03383cb9a74e1835_1440w.webp" alt="img"></p><p>公式：</p><p>=OFFSET(B5,6,2)</p><p>=SUM(OFFSET(B5,6,2,1,2))</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Excel表格的基本操作一：修改字体&quot;&gt;&lt;a href=&quot;#Excel表格的基本操作一：修改字体&quot; class=&quot;headerlink&quot; title=&quot;Excel表格的基本操作一：修改字体&quot;&gt;&lt;/a&gt;Excel表格的基本操作一：修改字体&lt;/h4&gt;&lt;p&gt;　　首先，从</summary>
      
    
    
    
    
    <category term="对象" scheme="http://example.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
